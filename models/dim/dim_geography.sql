-- models/dim/dim_geography.sql
-- Dimension table for Geography

-- 1. Define Table Structure
CREATE TABLE IF NOT EXISTS gold.finance.dim_geography (
  geography_key BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  state STRING,
  city STRING,
  zip_code STRING,
  county STRING,
  country STRING,
  -- Add other relevant attributes if available (e.g., region, timezone)
  _source_table STRING, -- Metadata: Source table name
  _load_timestamp TIMESTAMP -- Metadata: When the record was loaded/updated
)
USING DELTA
COMMENT 'Dimension table for geographic locations derived from deal data.'
PARTITIONED BY (state) -- Example partitioning
TBLPROPERTIES (
    'delta.autoOptimize.optimizeWrite' = 'true',
    'delta.autoOptimize.autoCompact' = 'true',
    'delta.columnMapping.mode' = 'name' -- Required for IDENTITY columns
);

-- 2. Merge incremental changes
MERGE INTO gold.finance.dim_geography AS target
USING (
  -- Source query: Select distinct location combinations from the source table
  SELECT DISTINCT
      COALESCE(state, 'Unknown') AS state,
      COALESCE(city, 'Unknown') AS city,
      COALESCE(zip, 'Unknown') AS zip_code,
      COALESCE(county, 'Unknown') AS county,
      'USA' as country, -- Assuming USA, adjust if needed
      'silver.deal.big_deal' as _source_table
  FROM silver.deal.big_deal
  -- Only consider rows where at least one geography attribute is known
  WHERE state IS NOT NULL OR city IS NOT NULL OR zip IS NOT NULL OR county IS NOT NULL
) AS source
-- Match on the composite natural key, handling NULLs safely
ON target.state <=> source.state
  AND target.city <=> source.city
  AND target.zip_code <=> source.zip_code
  AND target.county <=> source.county

-- Update existing records (e.g., if country mapping logic changes)
WHEN MATCHED AND (
    target.country <> source.country
    -- Add other checks if more attributes are added
  ) THEN
  UPDATE SET
    target.country = source.country,
    target._source_table = source._source_table,
    target._load_timestamp = CURRENT_TIMESTAMP()

-- Insert new unique locations (geography_key is auto-generated)
WHEN NOT MATCHED THEN
  INSERT (
    state,
    city,
    zip_code,
    county,
    country,
    _source_table,
    _load_timestamp
  )
  VALUES (
    source.state,
    source.city,
    source.zip_code,
    source.county,
    source.country,
    source._source_table,
    CURRENT_TIMESTAMP()
  );

-- Note: This DDL only creates the table structure.
-- Populating it requires an ETL process that handles:
-- 1. Sourcing distinct combinations from bronze.leaseend_db_public.addresses, silver.deal.big_deal, etc.
-- 2. Deduplicating records.
-- 3. Implementing SCD Type 2 logic for effective/expiry dates and current flag.
-- 4. Handling NULLs and data cleansing (e.g., standardizing state abbreviations). 